using System;
using System.Data;
using System.Linq;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml;
using DataAccess;

namespace Lateral8.Articles.OpenXML
{
    public class ExcelExport
    {

        #region Properties 

        private UInt32Value _numberStyleId;
        private UInt32Value _doubleStyleId;
        private UInt32Value _dateStyleId;

        #endregion
        
        #region Public Methods

        public void ExportDataTable(
            Study study, 
            string exportFile)
        {
            //create the empty spreadsheet template and save the file
            //using the class generated by the Productivity tool
            ExcelDocument excelDocument = new ExcelDocument();
            excelDocument.CreatePackage(exportFile);

            //populate the data into the spreadsheet
            using (SpreadsheetDocument spreadsheet =
                SpreadsheetDocument.Open(exportFile, true))
            {
                WorkbookPart workbook = spreadsheet.WorkbookPart;
                //create a reference to Sheet1
                WorksheetPart worksheet = workbook.WorksheetParts.Last();
                SheetData data = worksheet.Worksheet.GetFirstChild<SheetData>();

                //add column names to the first row
                Row header = new Row();
                header.RowIndex = (UInt32)1;

                Stylesheet styleSheet = workbook.WorkbookStylesPart.Stylesheet;

                //build the formatted header style
                UInt32Value headerFontIndex = 
                    createFont(
                        styleSheet, 
                        "Arial", 
                        12, 
                        true, 
                        System.Drawing.Color.White);
                //set the background color style
                UInt32Value headerFillIndex =
                    createFill(
                        styleSheet,
                        System.Drawing.Color.SlateGray);
                //create the cell style by combining font/background
                UInt32Value headerStyleIndex =
                    createCellFormat(
                        styleSheet,
                        headerFontIndex,
                        headerFillIndex,
                        null);
                
                //foreach (DataColumn column in table.Columns)
                //{
                //    Cell headerCell = createTextCell(
                //        table.Columns.IndexOf(column) + 1, 
                //        1, 
                //        column.ColumnName,
                //        headerStyleIndex);

                //    header.AppendChild(headerCell); 
                //}

                data.AppendChild(header);

                /*
                 * Create a set of basic cell styles for specific formats...
                 * If you are controlling your table then you can simply create the styles you need,
                 * this set of code is still intended to be generic.
                 */
                _numberStyleId = createCellFormat(styleSheet, null, null, UInt32Value.FromUInt32(3));
                _doubleStyleId = createCellFormat(styleSheet, null, null, UInt32Value.FromUInt32(4));
                _dateStyleId = createCellFormat(styleSheet, null, null, UInt32Value.FromUInt32(14));

                //loop through each data row
                DataRow contentRow;
           
                //for (int i = 0;i < table.Rows.Count; i++)
                //{
                //    contentRow = table.Rows[i];
                //    data.AppendChild(createContentRow(contentRow, i + 2));
                //}

            }            
        }

        #endregion

        #region WorkBook Methods 

        /// <summary>
        /// Creates a new font and appends it to the workbook's stylesheet
        /// </summary>
        /// <param name="styleSheet">The stylesheet for the current WorkBook</param>
        /// <param name="fontName">The font name.</param>
        /// <param name="fontSize">The font size.</param>
        /// <param name="isBold">Set to true for bold font.</param>
        /// <param name="foreColor">The font color.</param>
        /// <returns>The index of the font.</returns>
        private UInt32Value createFont(
            Stylesheet styleSheet,
            string fontName,
            Nullable<double> fontSize,
            bool isBold,
            System.Drawing.Color foreColor)
        {

            Font font = new Font();
            
            if (!string.IsNullOrEmpty(fontName))
            {
                FontName name = new FontName()
                {
                    Val = fontName
                };
                font.Append(name);
            }

            if (fontSize.HasValue)
            {
                FontSize size = new FontSize()
                {
                    Val = fontSize.Value
                };
                font.Append(size);
            }

            if (isBold == true)
            {
                Bold bold = new Bold();
                font.Append(bold);
            }

            if (foreColor != null)
            {
                Color color = new Color()
                {
                    Rgb = new HexBinaryValue()
                    {
                        Value = 
                            System.Drawing.ColorTranslator.ToHtml(
                                System.Drawing.Color.FromArgb(
                                    foreColor.A, 
                                    foreColor.R, 
                                    foreColor.G, 
                                    foreColor.B)).Replace("#", "")
                    }
                };
                font.Append(color);
            }
            styleSheet.Fonts.Append(font);
            UInt32Value result = styleSheet.Fonts.Count;
            styleSheet.Fonts.Count++;
            return result;
        }

        /// <summary>
        /// Creates a new Fill object and appends it to the WorkBook's stylesheet.
        /// </summary>
        /// <param name="styleSheet">The stylesheet for the current WorkBook.</param>
        /// <param name="fillColor">The background color for the fill.</param>
        /// <returns></returns>
        private UInt32Value createFill(
            Stylesheet styleSheet,
            System.Drawing.Color fillColor)
        {
            Fill fill = new Fill(
                new PatternFill(
                    new ForegroundColor()
                    {
                        Rgb = new HexBinaryValue()
                        {
                            Value =
                            System.Drawing.ColorTranslator.ToHtml(
                                System.Drawing.Color.FromArgb(
                                    fillColor.A,
                                    fillColor.R,
                                    fillColor.G,
                                    fillColor.B)).Replace("#", "")
                        }
                    })
                {
                    PatternType = PatternValues.Solid
                }
            );
            styleSheet.Fills.Append(fill);

            UInt32Value result = styleSheet.Fills.Count;
            styleSheet.Fills.Count++;
            return result;
        }

        private UInt32Value createCellFormat(
            Stylesheet styleSheet,
            UInt32Value fontIndex,
            UInt32Value fillIndex,
            UInt32Value numberFormatId)
        {
            CellFormat cellFormat = new CellFormat();
            
            if (fontIndex != null)
                cellFormat.FontId = fontIndex;
            
            if (fillIndex != null)
                cellFormat.FillId = fillIndex;

            if (numberFormatId != null)
            {
                cellFormat.NumberFormatId = numberFormatId;
                cellFormat.ApplyNumberFormat = BooleanValue.FromBoolean(true);
            }

            styleSheet.CellFormats.Append(cellFormat);

            UInt32Value result = styleSheet.CellFormats.Count;
            styleSheet.CellFormats.Count++;
            return result;
        }

        /// <summary>
        /// Gets the Excel column name based on a supplied index number.
        /// </summary>
        /// <returns>1 = A, 2 = B... 27 = AA, etc.</returns>
        private string getColumnName(int columnIndex)
        {
            int dividend = columnIndex;
            string columnName = String.Empty;
            int modifier;

            while (dividend > 0)
            {
                modifier = (dividend - 1) % 26;
                columnName = 
                    Convert.ToChar(65 + modifier).ToString() + columnName;
                dividend = (int)((dividend - modifier) / 26);
            }

            return columnName;
        }

        private Row createContentRow(
            DataRow dataRow,
            int rowIndex)
        {
            Row row = new Row

            {
                RowIndex = (UInt32)rowIndex
            };
            
            Nullable<uint> styleIndex = null;
            double doubleValue;
            int intValue;
            DateTime dateValue;
            
            for (int i = 0; i < dataRow.Table.Columns.Count; i++)
            {
                Cell dataCell;

                //check the data type of the cell content to apply basic formatting
                if (DateTime.TryParse(dataRow[i].ToString(), out dateValue))
                {
                    styleIndex = _dateStyleId;
                    //the ToOADate method addresses how Excel stores Date values...
                    dataCell = createValueCell(i + 1, rowIndex, dateValue.ToOADate().ToString(), styleIndex);
                }
                else if (int.TryParse(dataRow[i].ToString(), out intValue))
                {
                    styleIndex = _numberStyleId;
                    dataCell = createValueCell(i + 1, rowIndex, intValue, styleIndex);
                }
                else if (Double.TryParse(dataRow[i].ToString(), out doubleValue))
                {
                    styleIndex = _doubleStyleId;
                    dataCell = createValueCell(i + 1, rowIndex, doubleValue, styleIndex);
                }
                else
                {
                    //assume the value is string, use the InlineString value type...
                    dataCell = createTextCell(i + 1, rowIndex, dataRow[i], null);
                }

                 
                row.AppendChild(dataCell);
                styleIndex = null;                
            }
            return row;
        }

        /// <summary>
        /// Creates a new Cell object with the InlineString data type.
        /// </summary>
        private Cell createTextCell(
            int columnIndex,
            int rowIndex,
            object cellValue,
            Nullable<uint> styleIndex)
        {
            Cell cell = new Cell();

            cell.DataType = CellValues.InlineString;
            cell.CellReference = getColumnName(columnIndex) + rowIndex;

            //apply the cell style if supplied
            if (styleIndex.HasValue)
                cell.StyleIndex = styleIndex.Value;

            InlineString inlineString = new InlineString();
            Text t = new Text();

            t.Text = cellValue.ToString();
            inlineString.AppendChild(t);
            cell.AppendChild(inlineString);

            return cell;
        }
        
        /// <summary>
        /// Creates a new Cell object.
        /// </summary>
        private Cell createValueCell(
            int columnIndex,
            int rowIndex,
            object cellValue,
            Nullable<uint> styleIndex)
        {
            Cell cell = new Cell();
            cell.CellReference = getColumnName(columnIndex) + rowIndex;
            CellValue value = new CellValue();  
            value.Text = cellValue.ToString();            

            //apply the cell style if supplied
            if (styleIndex.HasValue)
                cell.StyleIndex = styleIndex.Value;

            cell.AppendChild(value);

            return cell;
        }

        #endregion
        
    }
}
