using System;
using System.Data;
using System.Linq;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using DocumentFormat.OpenXml;
using DataAccess;

namespace Lateral8.Articles.OpenXML
{
    public class ExcelExport
    {

        #region Properties 

        private UInt32Value _numberStyleId;
        private UInt32Value _doubleStyleId;
        private UInt32Value _dateStyleId;

        #endregion
        
        #region Public Methods

        public void ExportDataTable(
            Study s, 
            string exportFile)
        {
            //create the empty spreadsheet template and save the file
            //using the class generated by the Productivity tool
            ExcelDocument excelDocument = new ExcelDocument();
            excelDocument.CreatePackage(exportFile);

            //populate the data into the spreadsheet
            using (SpreadsheetDocument spreadsheet =
                SpreadsheetDocument.Open(exportFile, true))
            {
                WorkbookPart workbook = spreadsheet.WorkbookPart;
                //create a reference to Sheet1
                WorksheetPart worksheet = workbook.WorksheetParts.Last();
                SheetData data = worksheet.Worksheet.GetFirstChild<SheetData>();

                
                Stylesheet styleSheet = workbook.WorkbookStylesPart.Stylesheet;

                UInt32Value bottomOnlyBorderIndex = createBorder(styleSheet, false, true, false, false);
                UInt32Value allBorderIndex = createBorder(styleSheet, true, true, true, true);
                UInt32Value nullBorderIndex = createBorder(styleSheet, false, false, false, false);
                
                

                //build the formatted header style
                UInt32Value fontIndex = 
                    createFont(
                        styleSheet,
                        "Cabrili", 
                        11, 
                        false, 
                        System.Drawing.Color.Black);

                //set the background color style
                UInt32Value headerFillIndex =
                    createFill(
                        styleSheet,
                        System.Drawing.Color.FromArgb(146, 208, 80));
                
                //create the cell style by combining font/background
                UInt32Value headerStyleIndex =
                    createCellFormat(
                        styleSheet,
                        fontIndex,
                        headerFillIndex,
                        null,bottomOnlyBorderIndex);


                //build the formatted header style
                
                //set the background color style
                UInt32Value bgColorFillIndex =
                    createFill(
                        styleSheet,
                        System.Drawing.Color.FromArgb(221, 217, 196));


                //create the cell style by combining font/background
                UInt32Value blankCellStyleIndex =
                    createCellFormat(
                        styleSheet,
                        fontIndex,
                        bgColorFillIndex,
                        null,nullBorderIndex);


                
                //create the cell style by combining font/background
                UInt32Value dataRowStyleIndex =
                    createCellFormat(
                        styleSheet,
                        fontIndex,
                        bgColorFillIndex,
                        null,allBorderIndex);


                //build the formatted header style
                
                //set the background color style
                UInt32Value tableHeaderColorFillIndex =
                    createFill(
                        styleSheet,
                        System.Drawing.Color.FromArgb(0, 176, 80));

                //create the cell style by combining font/background
                UInt32Value tableHeaderStyleIndex =
                    createCellFormat(
                        styleSheet,
                        fontIndex,
                        tableHeaderColorFillIndex,
                        null,allBorderIndex);



                using (var db = new SpecToolModelContext())
                {

                  //  db.Studies.Attach(s);
                    int rowIndex = 1;

                    Row row = new Row();

                    row.RowIndex = (uint)rowIndex;
                    /*
                     146,208,80
0,176,80
221,217,196
                     */

                    row.Append(
                    
                        createTextCell(1, rowIndex,
                            string.Format("Specification for Protocol: {0}", s.Name),
                            headerStyleIndex)
                            );


                    for (int i = 2; i <= 10; i++)
                    {
                        Cell c = new Cell();
                        c.CellReference = getColumnName(i)+rowIndex;
                        c.StyleIndex = headerStyleIndex;
                        row.Append(c);
                    }

                    data.AppendChild(row);
                    rowIndex++;
                    row = new Row();

                    for (int i = 1; i <= 10; i++)
                    {
                        Cell c = new Cell();
                        c.CellReference = getColumnName(i)+rowIndex;
                        c.StyleIndex = blankCellStyleIndex;
                        row.Append(c);
                    }

                    data.AppendChild(row);

                    foreach (var dm in s.Domains)
                    {
                        rowIndex++;
                        row = new Row();

                        row.Append(
                            createTextCell(1, rowIndex,
                               string.Format("Domain: {0} ({1})", dm.Name,dm.Description),
                               blankCellStyleIndex)
                               );
                        for (int i = 2; i <= 10; i++)
                        {
                            Cell c = new Cell();
                            c.CellReference = getColumnName(i) + rowIndex;
                            c.StyleIndex = blankCellStyleIndex;
                            row.Append(c);
                        }

                        data.AppendChild(row);


                        rowIndex++;
                        row = new Row();

                        row.Append(
                            createTextCell(1, rowIndex,
                               string.Format("{0}", dm.StructureDescription),
                               blankCellStyleIndex)
                               );
                        for (int i = 2; i <= 10; i++)
                        {
                            Cell c = new Cell();
                            c.CellReference = getColumnName(i) + rowIndex;
                            c.StyleIndex = blankCellStyleIndex;
                            row.Append(c);
                        }

                        data.AppendChild(row);




                        //write header
                        var headers = new string[] { 
                        "VARIABLE_NM",
                        "VARIABLE DESCRIPTION",
                        "DATA_TYPE",
                        "LENGTH",
                        "CORE",
                        "ORIGIN_CD",
                        "MANDATORY",
                        "CONTROLLED TERMINOLOGY",
                        "CODED VALUE",
                        "DECODE"
                                                    };


                        rowIndex++;
                        row = new Row();

                        for(int i=0;i<headers.Length;i++)
                        {
                            row.Append(
                           createTextCell(i+1, rowIndex,
                              headers[i],
                              tableHeaderStyleIndex)
                              );
                        }

                        data.AppendChild(row);

#region "Getdata"

                        var domainVarData =
                        (
                        from d in db.Domains
                        where d.Id == dm.Id
                        from v in d.Variables
                        join svx in db.StudyDomainVarExclusions
                        on new { VariableId = v.Id, DomainId = v.DomainId, StudyId = (int)d.StudyId } equals new { svx.VariableId, svx.DomainId, svx.StudyId } into g1
                        from svx2 in g1.DefaultIfEmpty()

                        select new
                        {
                            VariableObject = v,
                            DomainId = d.Id,
                            DomainName = d.Name,
                            VaribleName = v.LableText + " (" + v.Name + ")",
                            VariableId = v.Id,
                            IsRequired = (v.Core == DataAccess.VariableCore.Req),
                            CodeListIdInVar = v.CodeListId,
                            IsVarExcluded = svx2 != null ? true : false
                        }
                        ).ToList();


                        var codeListData =
        (
        from d in db.Domains
        where d.Id == dm.Id
        join v in db.Variables on d.Id equals v.DomainId

        join vcl in db.CodeLists on v.CodeListId equals vcl.Id into gCL
        from vcl2 in gCL

        join cvl in db.CodeListValues on v.CodeListId equals cvl.CodeListId into gCLV
        from clv2 in gCLV

        join svx in db.StudyCodeListValueExclusions
        on new { VariableId = v.Id, DomainId = v.DomainId, StudyId = (int)d.StudyId, CodeListValueId = clv2.Id } equals new { svx.VariableId, svx.DomainId, svx.StudyId, svx.CodeListValueId } into g1
        from svx2 in g1.DefaultIfEmpty()
        select new
        {
            DomainId = d.Id,
            DomainName = d.Name,
            VaribleName = v.LableText + " (" + v.Name + ")",
            VariableId = v.Id,
            CodeListIdInVar = v.CodeListId,
            CodeListName = vcl2 != null ? vcl2.Name : null,
            CodeListId = vcl2 != null ? (int?)vcl2.Id : null,
            CodeListValueCode = clv2 != null ? clv2.Name : null,
            CodeListValueDecode = clv2 != null ? clv2.Value : null,
            CodeListValueId = clv2 != null ? (int?)clv2.Id : null,
            IsCLVExcluded = svx2 != null ? true : false
        }
        ).ToList();
#endregion

                        foreach (var v in domainVarData)
                        {
                            if (!v.IsVarExcluded)
                            {

                                rowIndex++;
                                row = new Row();
                                int colIndex = 1;

                               row.Append(createTextCell(colIndex++, rowIndex, v.VariableObject.Name,dataRowStyleIndex));
                               row.Append(createTextCell(colIndex++, rowIndex, v.VariableObject.LableText, dataRowStyleIndex));
                               row.Append(createTextCell(colIndex++, rowIndex, v.VariableObject.DataType.ToString(), dataRowStyleIndex));
                               row.Append(createTextCell(colIndex++, rowIndex, v.VariableObject.Length.ToString(), dataRowStyleIndex));
                               row.Append(createTextCell(colIndex++, rowIndex, v.VariableObject.Core.ToString(), dataRowStyleIndex));
                               row.Append(createTextCell(colIndex++, rowIndex, v.VariableObject.Origin.ToString(), dataRowStyleIndex));
                               row.Append(createTextCell(colIndex++, rowIndex, v.IsRequired ? "Yes" : "No", dataRowStyleIndex));


                               if (v.CodeListIdInVar != null)
                               {
                                   var clvs = codeListData.Where(clv => clv.DomainId == v.DomainId && clv.VariableId == v.VariableId && clv.CodeListId == v.CodeListIdInVar && clv.IsCLVExcluded == false).ToList();


                                   row.Append(createTextCell(colIndex++, rowIndex, clvs.First().CodeListName, dataRowStyleIndex));

                                   var clCodeColIndex = colIndex++;
                                   var clValueColIndex = colIndex++;

                                   var localIndex = 0;

                                   foreach (var clv in clvs)
                                   {
                                       localIndex++;

                                       if (localIndex > 1)
                                       {
                                           for (int i = 1; i <= 8; i++)
                                           {
                                               Cell c = new Cell();
                                               c.CellReference = getColumnName(i) + rowIndex;
                                               c.StyleIndex = dataRowStyleIndex;
                                               row.Append(c);
                                           }
                                       }

                                       row.Append(createTextCell(clCodeColIndex, rowIndex, clv.CodeListValueCode, dataRowStyleIndex));

                                       row.Append(createTextCell(clValueColIndex, rowIndex, clv.CodeListValueDecode, dataRowStyleIndex));

                                       data.AppendChild(row);

                                       if (localIndex < clvs.Count)
                                       {
                                           row = new Row();
                                           rowIndex++;
                                       }
                                   }
                               }
                               else
                               {
                                   for (int i = 8; i <= 10; i++)
                                   {
                                       Cell c = new Cell();
                                       c.CellReference = getColumnName(i) + rowIndex;
                                       c.StyleIndex = dataRowStyleIndex;
                                       row.Append(c);
                                   }


                                   data.AppendChild(row);
                               }
                            }
                        }



                    }
                
                
                
                    //foreach (DataColumn column in table.Columns)
                    //{
                    //    Cell headerCell = createTextCell(
                    //        table.Columns.IndexOf(column) + 1,
                    //        1,
                    //        column.ColumnName,
                    //        headerStyleIndex);

                    //    header.AppendChild(headerCell);
                    //}

                    //data.AppendChild(header);

                    /*
                     * Create a set of basic cell styles for specific formats...
                     * If you are controlling your table then you can simply create the styles you need,
                     * this set of code is still intended to be generic.
                     */
                    _numberStyleId = createCellFormat(styleSheet, null, null, UInt32Value.FromUInt32(3));
                    _doubleStyleId = createCellFormat(styleSheet, null, null, UInt32Value.FromUInt32(4));
                    _dateStyleId = createCellFormat(styleSheet, null, null, UInt32Value.FromUInt32(14));

                    //loop through each data row
                    
                    //DataRow contentRow;

                    //for (int i = 0; i < table.Rows.Count; i++)
                    //{
                    //    contentRow = table.Rows[i];
                    //    data.AppendChild(createContentRow(contentRow, i + 2));                
                    //}

                }
                

            }            
        }

        #endregion

        #region WorkBook Methods 

        /// <summary>
        /// Creates a new font and appends it to the workbook's stylesheet
        /// </summary>
        /// <param name="styleSheet">The stylesheet for the current WorkBook</param>
        /// <param name="fontName">The font name.</param>
        /// <param name="fontSize">The font size.</param>
        /// <param name="isBold">Set to true for bold font.</param>
        /// <param name="foreColor">The font color.</param>
        /// <returns>The index of the font.</returns>
        private UInt32Value createFont(
            Stylesheet styleSheet,
            string fontName,
            Nullable<double> fontSize,
            bool isBold,
            System.Drawing.Color foreColor)
        {

            Font font = new Font();
            
            if (!string.IsNullOrEmpty(fontName))
            {
                FontName name = new FontName()
                {
                    Val = fontName
                };
                font.Append(name);
            }

            if (fontSize.HasValue)
            {
                FontSize size = new FontSize()
                {
                    Val = fontSize.Value
                };
                font.Append(size);
            }

            if (isBold == true)
            {
                Bold bold = new Bold();
                font.Append(bold);
            }

            if (foreColor != null)
            {
                Color color = new Color()
                {
                    Rgb = new HexBinaryValue()
                    {
                        Value = 
                            System.Drawing.ColorTranslator.ToHtml(
                                System.Drawing.Color.FromArgb(
                                    foreColor.A, 
                                    foreColor.R, 
                                    foreColor.G, 
                                    foreColor.B)).Replace("#", "")
                    }
                };
                font.Append(color);
            }
            styleSheet.Fonts.Append(font);
            UInt32Value result = styleSheet.Fonts.Count;
            styleSheet.Fonts.Count++;
            return result;
        }

        /// <summary>
        /// Creates a new Fill object and appends it to the WorkBook's stylesheet.
        /// </summary>
        /// <param name="styleSheet">The stylesheet for the current WorkBook.</param>
        /// <param name="fillColor">The background color for the fill.</param>
        /// <returns></returns>
        private UInt32Value createFill(
            Stylesheet styleSheet,
            System.Drawing.Color fillColor)
        {
            Fill fill = new Fill(
                new PatternFill(
                    new ForegroundColor()
                    {
                        Rgb = new HexBinaryValue()
                        {
                            Value =
                            System.Drawing.ColorTranslator.ToHtml(
                                System.Drawing.Color.FromArgb(
                                    fillColor.A,
                                    fillColor.R,
                                    fillColor.G,
                                    fillColor.B)).Replace("#", "")
                        }
                    })
                {
                    PatternType = PatternValues.Solid
                }
            );
            styleSheet.Fills.Append(fill);

            UInt32Value result = styleSheet.Fills.Count;
            styleSheet.Fills.Count++;
            return result;
        }


        private UInt32Value createBorder(
            Stylesheet styleSheet, bool top = true, bool bottom=true, bool left=true, bool right=true, bool diagonal = false)
        {

            Border border2 = new Border();


            LeftBorder leftBorder2 = new LeftBorder() { Style = BorderStyleValues.Thin };
            Color color1 = new Color() { Indexed = (UInt32Value)64U };

            leftBorder2.Append(color1);

            RightBorder rightBorder2 = new RightBorder() { Style = BorderStyleValues.Thin };
            Color color2 = new Color() { Indexed = (UInt32Value)64U };

            rightBorder2.Append(color2);

            TopBorder topBorder2 = new TopBorder() { Style = BorderStyleValues.Thin };
            Color color3 = new Color() { Indexed = (UInt32Value)64U };

            topBorder2.Append(color3);

            BottomBorder bottomBorder2 = new BottomBorder() { Style = BorderStyleValues.Thin };
            Color color4 = new Color() { Indexed = (UInt32Value)64U };

            bottomBorder2.Append(color4);
            DiagonalBorder diagonalBorder2 = new DiagonalBorder();

            if(left)
            border2.Append(leftBorder2);

            if(right)
            border2.Append(rightBorder2);

            if(top)
                border2.Append(topBorder2);

            if(bottom)
                border2.Append(bottomBorder2);

            if(diagonal)
                border2.Append(diagonalBorder2);


            styleSheet.Borders.Append(border2);

            UInt32Value result = styleSheet.Borders.Count;
            styleSheet.Borders.Count++;

            return result;
        }


        private UInt32Value createCellFormat(
            Stylesheet styleSheet,
            UInt32Value fontIndex,
            UInt32Value fillIndex,
            UInt32Value numberFormatId,
            UInt32Value borderIndexId =null
            )
        {
            CellFormat cellFormat = new CellFormat();
            
            if (fontIndex != null)
                cellFormat.FontId = fontIndex;
            
            if (fillIndex != null)
                cellFormat.FillId = fillIndex;

            if (numberFormatId != null)
            {
                cellFormat.NumberFormatId = numberFormatId;
                cellFormat.ApplyNumberFormat = BooleanValue.FromBoolean(true);
            }

            if (borderIndexId != null)
            {
                cellFormat.BorderId = borderIndexId;
            }

            styleSheet.CellFormats.Append(cellFormat);

            UInt32Value result = styleSheet.CellFormats.Count;
            styleSheet.CellFormats.Count++;
            return result;
        }

        /// <summary>
        /// Gets the Excel column name based on a supplied index number.
        /// </summary>
        /// <returns>1 = A, 2 = B... 27 = AA, etc.</returns>
        private string getColumnName(int columnIndex)
        {
            int dividend = columnIndex;
            string columnName = String.Empty;
            int modifier;

            while (dividend > 0)
            {
                modifier = (dividend - 1) % 26;
                columnName = 
                    Convert.ToChar(65 + modifier).ToString() + columnName;
                dividend = (int)((dividend - modifier) / 26);
            }

            return columnName;
        }

        private Row createContentRow(
            DataRow dataRow,
            int rowIndex)
        {
            Row row = new Row

            {
                RowIndex = (UInt32)rowIndex
            };
            
            Nullable<uint> styleIndex = null;
            double doubleValue;
            int intValue;
            DateTime dateValue;
            
            for (int i = 0; i < dataRow.Table.Columns.Count; i++)
            {
                Cell dataCell;

                //check the data type of the cell content to apply basic formatting
                if (DateTime.TryParse(dataRow[i].ToString(), out dateValue))
                {
                    styleIndex = _dateStyleId;
                    //the ToOADate method addresses how Excel stores Date values...
                    dataCell = createValueCell(i + 1, rowIndex, dateValue.ToOADate().ToString(), styleIndex);
                }
                else if (int.TryParse(dataRow[i].ToString(), out intValue))
                {
                    styleIndex = _numberStyleId;
                    dataCell = createValueCell(i + 1, rowIndex, intValue, styleIndex);
                }
                else if (Double.TryParse(dataRow[i].ToString(), out doubleValue))
                {
                    styleIndex = _doubleStyleId;
                    dataCell = createValueCell(i + 1, rowIndex, doubleValue, styleIndex);
                }
                else
                {
                    //assume the value is string, use the InlineString value type...
                    dataCell = createTextCell(i + 1, rowIndex, dataRow[i], null);
                }

                 
                row.AppendChild(dataCell);
                styleIndex = null;                
            }
            return row;
        }

        /// <summary>
        /// Creates a new Cell object with the InlineString data type.
        /// </summary>
        private Cell createTextCell(
            int columnIndex,
            int rowIndex,
            object cellValue,
            Nullable<uint> styleIndex)
        {
            Cell cell = new Cell();

            cell.DataType = CellValues.InlineString;
            cell.CellReference = getColumnName(columnIndex) + rowIndex;

            //apply the cell style if supplied
            if (styleIndex.HasValue)
                cell.StyleIndex = styleIndex.Value;

            InlineString inlineString = new InlineString();
            Text t = new Text();

            t.Text = cellValue.ToString();
            inlineString.AppendChild(t);
            cell.AppendChild(inlineString);

            return cell;
        }
        
        /// <summary>
        /// Creates a new Cell object.
        /// </summary>
        private Cell createValueCell(
            int columnIndex,
            int rowIndex,
            object cellValue,
            Nullable<uint> styleIndex)
        {
            Cell cell = new Cell();
            cell.CellReference = getColumnName(columnIndex) + rowIndex;
            CellValue value = new CellValue();  
            value.Text = cellValue.ToString();            

            //apply the cell style if supplied
            if (styleIndex.HasValue)
                cell.StyleIndex = styleIndex.Value;

            cell.AppendChild(value);

            return cell;
        }

        #endregion
        
    }
}
